import chokidar from 'chokidar';
import * as esbuild from 'esbuild';
import fastGlob from 'fast-glob';

interface GlobPluginOptions<TControls extends boolean> {
    /** Options directly passed to chokidar when in watch mode */
    chokidarOptions?: chokidar.WatchOptions;
    /** Setting this to true returns a tuple with the plugin and a controls object */
    controls?: TControls;
    /** Disables all logging */
    silent?: boolean;
    /** Optional additional entrypoints/glob patterns */
    additionalEntrypoints?: string[];
    /** An array of glob patterns to exclude matches. This is an alternative way to use negative patterns. */
    ignore?: fastGlob.Options['ignore'];
}
interface GlobPluginControls {
    /** Stops watching if in watch mode */
    stopWatching: () => Promise<void>;
}
type ReturnValue<TControls extends boolean> = TControls extends true ? [esbuild.Plugin, GlobPluginControls] : esbuild.Plugin;
declare function globPlugin<TControls extends boolean = false>({ chokidarOptions, controls, silent, additionalEntrypoints, ignore, }?: GlobPluginOptions<TControls>): ReturnValue<TControls>;

export { GlobPluginControls, GlobPluginOptions, globPlugin };
