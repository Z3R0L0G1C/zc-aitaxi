{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import chokidar from 'chokidar';\nimport * as esbuild from 'esbuild';\nimport fastGlob from 'fast-glob';\nimport fs from 'fs';\nimport match from 'minimatch';\nimport path from 'path';\nimport invariant from 'tiny-invariant';\nimport unixify from 'unixify';\n\ninterface GlobPluginOptions<TControls extends boolean> {\n  /** Options directly passed to chokidar when in watch mode */\n  chokidarOptions?: chokidar.WatchOptions;\n  /** Setting this to true returns a tuple with the plugin and a controls object */\n  controls?: TControls;\n  /** Disables all logging */\n  silent?: boolean;\n  /** Optional additional entrypoints/glob patterns */\n  additionalEntrypoints?: string[];\n  /** An array of glob patterns to exclude matches. This is an alternative way to use negative patterns. */\n  ignore?: fastGlob.Options['ignore'];\n}\n\ninterface GlobPluginControls {\n  /** Stops watching if in watch mode */\n  stopWatching: () => Promise<void>;\n}\n\ntype ReturnValue<TControls extends boolean> = TControls extends true\n  ? [esbuild.Plugin, GlobPluginControls]\n  : esbuild.Plugin;\n\nfunction globPlugin<TControls extends boolean = false>({\n  chokidarOptions,\n  controls,\n  silent = false,\n  additionalEntrypoints = [],\n  ignore = [],\n}: GlobPluginOptions<TControls> = {}): ReturnValue<TControls> {\n  const log = createLogger(silent);\n\n  const context = {\n    watcher: undefined as chokidar.FSWatcher | undefined,\n  };\n\n  const controlFunctions: GlobPluginControls = {\n    async stopWatching() {\n      if (!context.watcher) return;\n      await context.watcher.close();\n    },\n  };\n\n  const plugin: esbuild.Plugin = {\n    name: 'glob',\n    async setup(build) {\n      if (\n        !Array.isArray(build.initialOptions.entryPoints) ||\n        !Array.isArray(additionalEntrypoints)\n      ) {\n        throw new TypeError('GlobPlugin currently only supports array entrypoints');\n      }\n\n      // Watch mode\n      if (build.initialOptions.watch) {\n        const entryGlobs = [...build.initialOptions.entryPoints, ...additionalEntrypoints];\n        // const watcher = chokidar.watch(entryGlobs, chokidarOptions);\n        const watcher = chokidar.watch(entryGlobs, { ...chokidarOptions, ignored: ignore });\n\n        context.watcher = watcher;\n\n        // AUGMENT OPTIONS\n        // ---------------\n        // Plugin takes care of running the build, so disable initial run by overriding entryPoints\n        build.initialOptions.entryPoints = undefined;\n\n        // Plugin takes care of watching fs, so disable esbuild watch\n        const onRebuild =\n          typeof build.initialOptions.watch === 'object'\n            ? build.initialOptions.watch.onRebuild\n            : undefined;\n        build.initialOptions.watch = false;\n\n        // Plugin relies on incremental and metafile options\n        const sharedOptions = {\n          ...build.initialOptions,\n          incremental: true,\n          metafile: true,\n        };\n\n        // MAPS\n        // ----\n        const entryToInputsMap: Map<string, string[]> = new Map();\n        const entryToBuildResultMap: Map<string, esbuild.BuildResult> = new Map();\n        const entryToOutputsMap: Map<string, string[]> = new Map();\n\n        // UTILITY FUNCTIONS\n        // -----------------\n        // Test if the provided path matches the entry globs\n        const matchesGlobs = (filePath: string): boolean => {\n          return entryGlobs.some((glob) => match(filePath, glob));\n        };\n\n        // Parse the build result and update watcher and maps\n        const handleBuildResult = async (\n          entry: string,\n          buildResult: esbuild.BuildResult,\n        ): Promise<void> => {\n          invariant(watcher);\n          invariant(buildResult.metafile, 'Expected metafile to be created');\n\n          const outputs = Object.keys(buildResult.metafile.outputs);\n          const inputs = Object.values(buildResult.metafile.outputs)\n            .filter((output) => !!output.entryPoint)\n            .flatMap((output) =>\n              Object.keys(output.inputs)\n                .filter((input) => !input.includes('node_modules'))\n                .map((input) => normalizePath(input)),\n            );\n\n          watcher.add(inputs);\n\n          entryToInputsMap.set(entry, inputs);\n          entryToOutputsMap.set(entry, outputs);\n          entryToBuildResultMap.set(entry, buildResult);\n\n          onRebuild?.(null, buildResult);\n        };\n\n        // Find the entries by the input path\n        const findEntriesByInput = (input: string): string[] => {\n          return (\n            [...entryToInputsMap.entries()]\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              .filter(([_entry, inputs]) => inputs.includes(input))\n              .map(([entry]) => entry)\n          );\n        };\n\n        // WATCH\n        // -----\n        watcher\n          .on('add', async (addedPath) => {\n            if (!matchesGlobs(addedPath)) return;\n\n            log('[add]', addedPath);\n\n            const buildResult = await esbuild.build({\n              ...sharedOptions,\n              entryPoints: [unixify(addedPath)],\n            });\n\n            handleBuildResult(addedPath, buildResult);\n          })\n          .on('change', async (changedPath) => {\n            const entries = findEntriesByInput(changedPath);\n\n            entries.forEach(async (entry) => {\n              log('[change]', entry);\n\n              const oldResult = entryToBuildResultMap.get(entry);\n\n              try {\n                invariant(oldResult?.rebuild, 'Expected all build results to be incremental');\n                handleBuildResult(entry, await oldResult.rebuild());\n              } catch {\n                //? Error is ignored, because esbuild handles logging of build errors already\n              }\n            });\n          })\n          .on('unlink', async (unlinkedPath) => {\n            if (build.initialOptions.write === false) return;\n\n            const outputPaths = entryToOutputsMap.get(unlinkedPath);\n\n            if (outputPaths) {\n              log('[unlink]', unlinkedPath);\n              outputPaths.forEach((outputPath) => fs.unlinkSync(outputPath));\n            }\n          });\n      } else {\n        const entryGlobs = [...build.initialOptions.entryPoints, ...additionalEntrypoints];\n        const resolvedEntryPoints = await fastGlob(entryGlobs, { ignore });\n        build.initialOptions.entryPoints = resolvedEntryPoints;\n      }\n    },\n  };\n\n  return (controls ? [plugin, controlFunctions] : plugin) as any;\n}\n\n// UTILITIES\n// ---------\n\nfunction createLogger(silent: boolean) {\n  return (...arguments_: Parameters<typeof console.log>) => {\n    if (!silent) console.log(...arguments_);\n  };\n}\n\nfunction normalizePath(filePath: string): string {\n  return path.relative(process.cwd(), filePath.replace(/^(\\w+:)/, ''));\n}\n\nexport type { GlobPluginControls, GlobPluginOptions };\nexport { globPlugin };\n"],"names":["esbuild"],"mappings":"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"}